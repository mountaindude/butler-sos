name: insiders-build
on:
    workflow_dispatch:
    push:
        branches:
            - master
jobs:
    insiders-build:
        strategy:
            matrix:
                os: [win-code-sign, mac-build2, mac-build1, ubuntu-latest]
                include:
                    - os: win-code-sign
                      build: |
                          # Inject git SHA into package.json
                          $GIT_SHA = (git rev-parse --short HEAD)
                          (Get-Content package.json) -replace '"version": "(.*?)"', ('"version": "$1-' + $GIT_SHA + '"') | Set-Content package.json

                          # Create a single JS file using esbuild
                          ./node_modules/.bin/esbuild "src/bundle.js" --bundle --outfile=build.cjs --format=cjs --platform=node --target=node22 --inject:./src/lib/import-meta-url.js --define:import.meta.url=import_meta_url

                          # Generate blob to be injected into the binary
                          node --experimental-sea-config src/sea-config.json

                          # Get a copy of the Node executable
                          node -e "require('fs').copyFileSync(process.execPath, '${env:DIST_FILE_NAME}.exe')" 

                          pwd
                          dir


                          # -------------------
                          # Remove the signature from the executable
                          $processOptions1 = @{
                            FilePath = "C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe"
                            Wait = $true
                            ArgumentList = "remove", "/s", "./${env:DIST_FILE_NAME}.exe"
                            WorkingDirectory = "."
                            NoNewWindow = $true
                          }
                          Start-Process @processOptions1

                          npx postject "${env:DIST_FILE_NAME}.exe" NODE_SEA_BLOB sea-prep.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

                          # -------------------
                          # Sign the executable
                          # 1st signing
                          $processOptions1 = @{
                            FilePath = "C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe"
                            Wait = $true
                            ArgumentList = "sign", "/sha1", "$env:CODESIGN_WIN_THUMBPRINT", "/tr", "http://time.certum.pl", "/td", "sha256", "/fd", "sha1", "/v", "./${env:DIST_FILE_NAME}.exe"
                            WorkingDirectory = "."
                            NoNewWindow = $true
                          }
                          Start-Process @processOptions1

                          # -------------------
                          # 2nd signing
                          $processOptions2 = @{
                            FilePath = "C:\Program Files (x86)/Windows Kits/10/bin/10.0.22621.0/x64/signtool.exe"
                            Wait = $true
                            ArgumentList = "sign", "/sha1", "$env:CODESIGN_WIN_THUMBPRINT", "/tr", "http://time.certum.pl", "/td", "sha256", "/fd", "sha256", "/v", "./${env:DIST_FILE_NAME}.exe"
                            WorkingDirectory = "."
                            NoNewWindow = $true
                          }
                          Start-Process @processOptions2

                          # -------------------
                          # Create insider's build zip
                          $compress = @{
                            Path = "./${env:DIST_FILE_NAME}.exe"
                            CompressionLevel = "Fastest"
                            DestinationPath = "${env:DIST_FILE_NAME}--win-x64--${{ github.sha }}.zip"
                          }
                          Compress-Archive @compress

                          # Add following directories & files to the created zip file, in the ./config directory.
                          # - ./src/config/production_template.yaml
                          # - ./src/config/log_appender_xml
                          mkdir config
                          Copy-Item -Path ./src/config/log_appender_xml -Destination ./config/ -Recurse
                          Copy-Item -Path ./src/config/production_template.yaml -Destination ./config/

                          Compress-Archive -Path "./config" -Update -DestinationPath "./${env:DIST_FILE_NAME}--win-x64--${{ github.sha }}.zip"


                          # -------------------
                          # Clean up
                          Remove-Item -Force build.cjs

                          dir

                      # artifact_release_name: release-binaries-win
                      # artifact_release_path: release-binaries-win/*
                      artifact_insider: butler-sos--win-x64--${{ github.sha }}.zip

                    # x64 build
                    - os: mac-build1
                      build: |
                          # Inject git SHA into package.json
                          GIT_SHA=$(git rev-parse --short HEAD)
                          VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
                          sed -i '' "s/\"version\": \".*\"/\"version\": \"$VERSION-$GIT_SHA\"/" package.json

                          # Create a single JS file using esbuild
                          ./node_modules/.bin/esbuild src/bundle.js  --bundle --outfile=build.cjs --format=cjs --platform=node --target=node22 --inject:./src/lib/import-meta-url.js --define:import.meta.url=import_meta_url

                          # Generate blob to be injected into the binary
                          node --experimental-sea-config src/sea-config.json

                          # Get a copy of the Node executable
                          cp $(command -v node) ${DIST_FILE_NAME}

                          # Remove the signature from the Node executable
                          codesign --remove-signature ${DIST_FILE_NAME}

                          # Inject the blob
                          npx postject ${DIST_FILE_NAME} NODE_SEA_BLOB sea-prep.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 --macho-segment-name NODE_SEA

                          security delete-keychain build.keychain || true

                          pwd
                          ls -la

                          # Start signing of the binary

                          # -------------------
                          # We need to create a new keychain, otherwise using the certificate will prompt
                          # with a UI dialog asking for the certificate password, which we can't
                          # use in a headless CI environment

                          # Turn our base64-encoded certificate back to a regular .p12 file              
                          echo "DEBUG: Decoding certificate from base64"
                          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

                          echo "DEBUG: Setting KEYCHAIN_NAME environment variable"
                          export KEYCHAIN_NAME="build.keychain"

                          echo "DEBUG: Creating new keychain"
                          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Getting current keychain list"
                          OLD_KEYCHAIN_NAMES=$(security list-keychains -d user | sed -e 's/"//g' | xargs)
                          echo "DEBUG: Current keychains: ${OLD_KEYCHAIN_NAMES}"

                          echo "DEBUG: Setting keychain search list"
                          security list-keychains -d user -s "${KEYCHAIN_NAME}" ${OLD_KEYCHAIN_NAMES}

                          echo "DEBUG: Getting current default keychain"
                          DEFAULT_KEYCHAIN=$(security default-keychain -d user | sed -e 's/"//g' | xargs)
                          echo "DEBUG: Default keychain is: ${DEFAULT_KEYCHAIN}"

                          echo "DEBUG: Setting our keychain as default"
                          security default-keychain -d user -s "${KEYCHAIN_NAME}"

                          echo "DEBUG: Unlocking keychain"
                          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Importing certificate into keychain"
                          security import certificate.p12 -k "${KEYCHAIN_NAME}" -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign

                          echo "DEBUG: Setting keychain timeout to prevent locking"
                          security set-keychain-settings -t 3600 -l "${KEYCHAIN_NAME}"

                          echo "DEBUG: Setting key partition list"
                          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Performing codesign operation"
                          codesign --force -s "$MACOS_CERTIFICATE_NAME" -v "./${DIST_FILE_NAME}" --deep --strict --options=runtime --timestamp --entitlements ./release-config/${DIST_FILE_NAME}.entitlements

                          echo "DEBUG: Verifying code signature"
                          codesign -vvv --deep --strict "./${DIST_FILE_NAME}"

                          # -------------------
                          # Notarize
                          # Store the notarization credentials so that we can prevent a UI password dialog from blocking the CI
                          echo "Create keychain profile"
                          # Get the absolute path to the keychain in ~/Library/Keychains/ with the -db suffix macOS adds to keychain files
                          KEYCHAIN_PATH=~/Library/Keychains/${KEYCHAIN_NAME}-db
                          echo "DEBUG: Using keychain at path: ${KEYCHAIN_PATH}"
                          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD" --keychain "${KEYCHAIN_PATH}"

                          # -------------------
                          # We can't notarize an app bundle directly, but we need to compress it as an archive.
                          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
                          # notarization service
                          # Notarize insider binary
                          echo "Creating temp notarization archive for insider build"
                          zip -r "./${DIST_FILE_NAME}--macos-x64--${{ github.sha }}.zip" "./${DIST_FILE_NAME}" -x "*.DS_Store"

                          # Add additional files to the zip file
                          cd src
                          zip -u -r "../${DIST_FILE_NAME}--macos-x64--${{ github.sha }}.zip" "./config/production_template.yaml" "./config/log_appender_xml" -x "*.DS_Store"
                          cd ..

                          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
                          echo "Notarize insider app"
                          xcrun notarytool submit "./${DIST_FILE_NAME}--macos-x64--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait --keychain "${KEYCHAIN_PATH}"

                          echo "DEBUG: Restoring original default keychain"
                          security default-keychain -d user -s "$DEFAULT_KEYCHAIN" || echo "WARNING: Failed to restore default keychain, continuing anyway"

                          echo "DEBUG: Restoring original keychain list"
                          security list-keychains -d user -s ${OLD_KEYCHAIN_NAMES} || echo "WARNING: Failed to restore keychain list, continuing anyway"

                          # -------------------
                          # Clean up
                          # Delete build keychain
                          security delete-keychain build.keychain
                          rm build.cjs certificate.p12

                          ls -la
                      artifact_insider: butler-sos--macos-x64--${{ github.sha }}.zip

                    # Arm64 build
                    - os: mac-build2
                      build: |
                          # Inject git SHA into package.json
                          GIT_SHA=$(git rev-parse --short HEAD)
                          VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
                          sed -i '' "s/\"version\": \".*\"/\"version\": \"$VERSION-$GIT_SHA\"/" package.json

                          # Create a single JS file using esbuild
                          ./node_modules/.bin/esbuild src/bundle.js  --bundle --outfile=build.cjs --format=cjs --platform=node --target=node22 --inject:./src/lib/import-meta-url.js --define:import.meta.url=import_meta_url

                          # Generate blob to be injected into the binary
                          node --experimental-sea-config src/sea-config.json

                          # Get a copy of the Node executable
                          cp $(command -v node) ${DIST_FILE_NAME}

                          # Remove the signature from the Node executable
                          codesign --remove-signature ${DIST_FILE_NAME}

                          # Inject the blob
                          npx postject ${DIST_FILE_NAME} NODE_SEA_BLOB sea-prep.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 --macho-segment-name NODE_SEA

                          security delete-keychain build.keychain || true

                          pwd
                          ls -la

                          # Start signing of the binary

                          # -------------------
                          # We need to create a new keychain, otherwise using the certificate will prompt
                          # with a UI dialog asking for the certificate password, which we can't
                          # use in a headless CI environment

                          # Turn our base64-encoded certificate back to a regular .p12 file              
                          echo "DEBUG: Decoding certificate from base64"
                          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

                          echo "DEBUG: Setting KEYCHAIN_NAME environment variable"
                          export KEYCHAIN_NAME="build.keychain"

                          echo "DEBUG: Creating new keychain"
                          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Getting current keychain list"
                          OLD_KEYCHAIN_NAMES=$(security list-keychains -d user | sed -e 's/"//g' | xargs)
                          echo "DEBUG: Current keychains: ${OLD_KEYCHAIN_NAMES}"

                          echo "DEBUG: Setting keychain search list"
                          security list-keychains -d user -s "${KEYCHAIN_NAME}" ${OLD_KEYCHAIN_NAMES}

                          echo "DEBUG: Getting current default keychain"
                          DEFAULT_KEYCHAIN=$(security default-keychain -d user | sed -e 's/"//g' | xargs)
                          echo "DEBUG: Default keychain is: ${DEFAULT_KEYCHAIN}"

                          echo "DEBUG: Setting our keychain as default"
                          security default-keychain -d user -s "${KEYCHAIN_NAME}"

                          echo "DEBUG: Unlocking keychain"
                          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Importing certificate into keychain"
                          security import certificate.p12 -k "${KEYCHAIN_NAME}" -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign

                          echo "DEBUG: Setting keychain timeout to prevent locking"
                          security set-keychain-settings -t 3600 -l "${KEYCHAIN_NAME}"

                          echo "DEBUG: Setting key partition list"
                          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" "${KEYCHAIN_NAME}"

                          echo "DEBUG: Performing codesign operation"
                          codesign --force -s "$MACOS_CERTIFICATE_NAME" -v "./${DIST_FILE_NAME}" --deep --strict --options=runtime --timestamp --entitlements ./release-config/${DIST_FILE_NAME}.entitlements

                          echo "DEBUG: Verifying code signature"
                          codesign -vvv --deep --strict "./${DIST_FILE_NAME}"

                          # -------------------
                          # Notarize
                          # Store the notarization credentials so that we can prevent a UI password dialog from blocking the CI
                          echo "Create keychain profile"
                          # xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
                          #xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD" --keychain "${KEYCHAIN_NAME}"
                          # Get the absolute path to the keychain in ~/Library/Keychains/ with the -db suffix macOS adds to keychain files
                          KEYCHAIN_PATH=~/Library/Keychains/${KEYCHAIN_NAME}-db
                          echo "DEBUG: Using keychain at path: ${KEYCHAIN_PATH}"
                          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD" --keychain "${KEYCHAIN_PATH}"


                          # -------------------
                          # We can't notarize an app bundle directly, but we need to compress it as an archive.
                          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
                          # notarization service
                          # Notarize insider binary
                          echo "Creating temp notarization archive for insider build"
                          zip -r "./${DIST_FILE_NAME}--macos-arm64--${{ github.sha }}.zip" "./${DIST_FILE_NAME}" -x "*.DS_Store"

                          # Add additional files to the zip file
                          cd src
                          zip -u -r "../${DIST_FILE_NAME}--macos-arm64--${{ github.sha }}.zip" "./config/production_template.yaml" "./config/log_appender_xml" -x "*.DS_Store"
                          cd ..

                          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
                          echo "Notarize insider app"
                          # xcrun notarytool submit "./${DIST_FILE_NAME}--macos-arm64--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait
                          # xcrun notarytool submit "./${DIST_FILE_NAME}--macos-arm64--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait --keychain "${KEYCHAIN_NAME}"
                          xcrun notarytool submit "./${DIST_FILE_NAME}--macos-arm64--${{ github.sha }}.zip" --keychain-profile "notarytool-profile" --wait --keychain "${KEYCHAIN_PATH}"

                          echo "DEBUG: Restoring original default keychain"
                          security default-keychain -d user -s "$DEFAULT_KEYCHAIN" || echo "WARNING: Failed to restore default keychain, continuing anyway"

                          echo "DEBUG: Restoring original keychain list"
                          security list-keychains -d user -s ${OLD_KEYCHAIN_NAMES} || echo "WARNING: Failed to restore keychain list, continuing anyway"

                          # -------------------
                          # Clean up
                          # Delete build keychain
                          security delete-keychain build.keychain
                          rm build.cjs certificate.p12

                          ls -la
                      artifact_insider: butler-sos--macos-arm64--${{ github.sha }}.zip

                    - os: ubuntu-latest
                      build: |
                          # Inject git SHA into package.json
                          GIT_SHA=$(git rev-parse --short HEAD)
                          VERSION=$(grep -o '"version": "[^"]*"' package.json | cut -d'"' -f4)
                          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION-$GIT_SHA\"/" package.json

                          ./node_modules/.bin/esbuild src/bundle.js  --bundle --outfile=build.cjs --format=cjs --platform=node --target=node22 --inject:./src/lib/import-meta-url.js --define:import.meta.url=import_meta_url
                          node --experimental-sea-config src/sea-config.json

                          # Get a copy of the Node executable
                          cp $(command -v node) ${DIST_FILE_NAME}
                          npx postject ${DIST_FILE_NAME} NODE_SEA_BLOB sea-prep.blob --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2

                          # Compress insider's build
                          # Include following directories & files in the created archive file.
                          # - ./src/config/log_appender_xml
                          # - ./src/config⁄production_template.yaml                          
                          ls -la
                          zip -9 -r ./${DIST_FILE_NAME}--linux-x64--${{ github.sha }}.zip ${DIST_FILE_NAME}

                          cd src
                          zip -9 -u -r "../${DIST_FILE_NAME}--linux-x64--${{ github.sha }}.zip" "./config/production_template.yaml" "./config/log_appender_xml"

                          # -------------------
                          # Clean up
                          cd ..
                          rm build.cjs

                          ls -la
                      artifact_insider: butler-sos--linux-x64--${{ github.sha }}.zip

        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22

            - name: Install tool for creating stand-alone executables
              run: |
                  npm install --save-exact esbuild

            - name: Install dependencies
              run: |
                  pwd 
                  npm ci --include=prod

            - name: Run Snyk to check for vulnerabilities
              # Snyk can be used to break the build when it detects security issues.
              # In this case we want to upload the SAST issues to GitHub Code Scanning
              #uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb
              if: |
                  github.repository_owner == 'ptarmiganlabs' &&
                  matrix.os == 'ubuntu-latest'
              continue-on-error: true # To make sure that SARIF upload gets called
              uses: snyk/actions/node@master
              env:
                  # This is where you will need to introduce the Snyk API token created with your Snyk account
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --file=./package.json --sarif-file-output=snyk.sarif
                  # command: test

            - name: Upload Snyk result to GitHub Code Scanning
              if: |
                  github.repository_owner == 'ptarmiganlabs' &&
                  matrix.os == 'ubuntu-latest'
              continue-on-error: true
              uses: github/codeql-action/upload-sarif@v3
              with:
                  sarif_file: snyk.sarif

            - name: Create binaries
              env:
                  DIST_FILE_NAME: butler-sos
                  GITHUB_TOKEN: ${{ secrets.PAT }}
                  MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE_BASE64_CODESIGN }}
                  MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_PWD }}
                  MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_CODESIGN_NAME }}
                  MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
                  PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
                  PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
                  PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
                  # CODESIGN_PWD: ${{ secrets.WIN_CODESIGN_PWD}}
                  # CODESIGN_INTERMEDIATE_BASE64: ${{ secrets.WIN_CODESIGN_INTERMEDIATE_BASE64 }}
                  # CODESIGN_BASE64: ${{ secrets.WIN_CODESIGN_BASE64}}
                  CODESIGN_WIN_THUMBPRINT: ${{ secrets.WIN_CODESIGN_THUMBPRINT}}
              run: |
                  pwd
                  ${{ matrix.build }}

            - name: Upload insider build artifacts to GitHub
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.artifact_insider }}
                  path: ${{ matrix.artifact_insider }}
