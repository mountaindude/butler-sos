name: butler-sos-log-monitor
on:
    schedule:
        # Run twice daily at 08:00 and 20:00 UTC
        - cron: '0 8,20 * * *'
    workflow_dispatch: # Allow manual triggering for testing

jobs:
    monitor-logs:
        runs-on: ${{ vars.BUTLER_SOS_INSIDER_DEPLOY_RUNNER || 'host2-win' }}
        env:
            BUTLER_SOS_INSIDER_SERVICE_NAME: ${{ vars.BUTLER_SOS_INSIDER_SERVICE_NAME || 'Butler SOS insiders build' }}
            BUTLER_SOS_INSIDER_DEPLOY_PATH: ${{ vars.BUTLER_SOS_INSIDER_DEPLOY_PATH || 'C:\butler-sos-insider' }}
            SMTP_SERVER: ${{ vars.SMTP_SERVER }}
            SMTP_PORT: ${{ vars.SMTP_PORT || '587' }}
            EMAIL_FROM: ${{ vars.EMAIL_FROM }}
            EMAIL_TO: ${{ vars.EMAIL_TO }}
            SERVER_NAME: ${{ vars.SERVER_NAME || 'Butler SOS Insider Server' }}
            SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
            SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

        steps:
            - name: Check Butler SOS log files for errors
              id: monitor-logs
              shell: powershell
              continue-on-error: false
              run: |
                  Write-Host "Test: Starting log monitoring"
                  Write-Host "Server: $env:SERVER_NAME"
                  Write-Host "Service: $env:BUTLER_SOS_INSIDER_SERVICE_NAME"

                  # Simple test - no actual log checking for now
                  Write-Host "Test completed successfully"

                  # Set outputs for testing
                  "errors_found=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                  "error_count=0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

            - name: Stop Butler SOS service if errors found
              id: stop-service
              if: steps.monitor-logs.outputs.errors_found == 'true'
              shell: powershell
              continue-on-error: true
              run: |
                  Write-Host "üõë Stopping Butler SOS service due to detected errors..."

                  $serviceName = $env:BUTLER_SOS_INSIDER_SERVICE_NAME

                  try {
                      $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
                      
                      if ($service) {
                          if ($service.Status -eq 'Running') {
                              Write-Host "Stopping service '$serviceName'..."
                              Stop-Service -Name $serviceName -Force -ErrorAction Stop
                              
                              # Wait for service to stop
                              $timer = 0
                              $timeout = 30
                              do {
                                  Start-Sleep -Seconds 1
                                  $timer++
                                  $service = Get-Service -Name $serviceName
                              } while ($service.Status -ne 'Stopped' -and $timer -lt $timeout)
                              
                              if ($service.Status -eq 'Stopped') {
                                  Write-Host "‚úÖ Service stopped successfully"
                                  "service_stopped=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                              } else {
                                  $serviceStatus = $service.Status
                                  Write-Host "‚ö†Ô∏è  Service did not stop within $timeout seconds. Status: $serviceStatus" -ForegroundColor Yellow
                                  "service_stopped=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                              }
                          } else {
                              $serviceStatus = $service.Status
                              Write-Host "‚ÑπÔ∏è  Service was not running. Current status: $serviceStatus"
                              "service_stopped=not_running" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                          }
                      } else {
                          Write-Host "‚ö†Ô∏è  Service '$serviceName' not found" -ForegroundColor Yellow
                          "service_stopped=not_found" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                      }
                      
                  } catch {
                      $errorMsg = $_.Exception.Message
                      Write-Host ("‚ùå Failed to stop service: " + $errorMsg) -ForegroundColor Red
                      Write-Host "::warning::Failed to stop Butler SOS service"
                      "service_stopped=failed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
                  }

            - name: Send error alert email
              id: send-email
              if: steps.monitor-logs.outputs.errors_found == 'true'
              shell: powershell
              continue-on-error: true
              run: |
                  Write-Host "üìß Sending error alert email..."

                  try {
                      # Load error data from previous step
                      $errorDataPath = Join-Path $env:TEMP "butler-sos-error-data.json"
                      if (-not (Test-Path $errorDataPath)) {
                          throw "Error data file not found: $errorDataPath"
                      }
                      
                      $errorDataJson = Get-Content -Path $errorDataPath -Raw
                      $errorData = $errorDataJson | ConvertFrom-Json
                      
                      # Check if email script exists on server
                      $emailScript = "D:\tools\scripts\insiders-build-monitor\Send-ErrorAlert.ps1"
                      if (-not (Test-Path $emailScript)) {
                          Write-Host "‚ö†Ô∏è  Email script not found at: $emailScript" -ForegroundColor Yellow
                          Write-Host "Cannot send email alert - script deployment needed"
                          Write-Host "::warning::Email script not found on server"
                          exit 0
                      }
                      
                      # Prepare email parameters
                      $emailParams = @{
                          SmtpServer = $env:SMTP_SERVER
                          SmtpPort = [int]$env:SMTP_PORT
                          From = $env:EMAIL_FROM
                          To = $env:EMAIL_TO
                          ServerName = $env:SERVER_NAME
                          ServiceName = $env:BUTLER_SOS_INSIDER_SERVICE_NAME
                          ErrorEntries = $errorData.ErrorEntries
                          CurrentLogPath = $errorData.CurrentLogPath
                          PreviousLogPath = $errorData.PreviousLogPath
                          ServiceErrorLogPath = $errorData.ServiceErrorLogPath
                          CurrentTotalLines = $errorData.CurrentTotalLines
                          CurrentInfoCount = $errorData.CurrentInfoCount
                          CurrentWarnCount = $errorData.CurrentWarnCount
                          CurrentErrorCount = $errorData.CurrentErrorCount
                          CurrentFatalCount = $errorData.CurrentFatalCount
                          PreviousTotalLines = $errorData.PreviousTotalLines
                          PreviousInfoCount = $errorData.PreviousInfoCount
                          PreviousWarnCount = $errorData.PreviousWarnCount
                          PreviousErrorCount = $errorData.PreviousErrorCount
                          PreviousFatalCount = $errorData.PreviousFatalCount
                          TemplatePath = "D:\tools\scripts\insiders-build-monitor\butler-sos-email-template-error-alert.html"
                          UseSSL = $true
                      }
                      
                      # Add credentials if available (PowerShell 5.1 compatible)
                      if ($env:SMTP_USERNAME) {
                          $emailParams.Username = $env:SMTP_USERNAME
                          if ($env:SMTP_PASSWORD) {
                              # Use plain text password for PS 5.1 compatibility
                              $emailParams.Password = $env:SMTP_PASSWORD
                          }
                      }
                      
                      Write-Host "Calling Send-ErrorAlert.ps1..."
                      $result = & $emailScript @emailParams
                      
                      if ($result) {
                          Write-Host "‚úÖ Error alert email sent successfully!"
                      } else {
                          Write-Host "‚ùå Failed to send error alert email"
                          Write-Host "::warning::Email sending failed"
                      }
                      
                      # Clean up
                      Remove-Item -Path $errorDataPath -Force -ErrorAction SilentlyContinue
                      
                  } catch {
                      $errorMsg = $_.Exception.Message
                      Write-Host ("‚ùå Failed to send error alert email: " + $errorMsg) -ForegroundColor Red
                      Write-Host ("::warning::Email alert failed - " + $errorMsg)
                  }

                  Write-Host "üìä Monitoring workflow completed"
                  Write-Host "Summary:"
                  Write-Host "  - Errors found: ${{ steps.monitor-logs.outputs.errors_found }}"
                  Write-Host "  - Error count: ${{ steps.monitor-logs.outputs.error_count }}"
                  Write-Host "  - Service stopped: ${{ steps.stop-service.outputs.service_stopped }}"
